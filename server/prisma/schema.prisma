generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}


// User table to store a user's info

model User {
    id         Int        @id @default(autoincrement())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    email      String     @unique
    auth0Id    String     @unique @default("")
    name       String?    @db.VarChar(255)
    picture    String?
    about      String?    @db.VarChar(255)
    company    String?    @db.VarChar(255)
    occupation String?    @db.VarChar(255)
    gender     String?    @db.VarChar(255)
    posts      Post[]
    berries    Berry[]
    comments   Comment[]
    followers  User[]     @relation("UserFollows", references: [id])
    followings User[]     @relation("UserFollows", references: [id])
    activities Activity[]
}

// Post table to record a post's info

model Post {
    id         Int        @id @default(autoincrement())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId   Int
    title      String     @db.VarChar(255)
    body       String     @db.Text
    comments   Comment[]
    berries    Berry[]
    tags       Tag[]
    activities Activity[]

    @@fulltext([body])
    @@fulltext([title])
    @@fulltext([title, body])
}

// Berry table to record the berry info and the post where berry belongs to

model Berry {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    Int
    post      Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId    Int
}

// Comment table to record the comment info and the post where comment belongs to

model Comment {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String   @db.VarChar(255)
    post      Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId    Int
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    Int
    parentId  Int?
}

// Tag table for users to create and attach their tags over the posts
model Tag {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    posts     Post[]
}

// Activity table to track the post, comment and berry activities
model Activity {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    Int
    post      Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    postId    Int
    type      Int
    berryId   Int?
    commentId Int?
}
